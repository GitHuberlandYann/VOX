Project Requirements:
    - create procedural terain in openGL
    - RENDER MUST BE SMOOTH. Avoid the freeze frames at all cost
	- user should be able to visit at least 16384*256*16384 cubes
	- Your program must be able to run for hours without eating the whole memory or slowing down
    - Your program will have to run in full screen mode
	- generate terrains such as hills, mountains or caves when the user goes underground
    - This generation has to be determinist
    - Each visited piece of terrain must be saved in the memory up to some limit you will set yourself and after which you can start deleting cubes from the memory
    - In the open, minimal distance render will be 160 cube
    - at least 2 different textures and 2 different types of cube
    - FoV must be 80 degrees
    - set up a skybox

    - camera
        - mouse must be able to control it on 2 axis
        - 4 keys that will make it go forth, back, right and left in according to the camera rotation
        - camera speed should be set around 1 cube/second
        - key that will multiply this speed by 20
    
    - BONUS
        - Have a render distance always higher than 14 ??? guess 1 is 16 blocs
        - fps counter is displayed (UI)
        - Render is smooth and doesnâ€™t freeze, event at x20 speed
        - Being able to delete blocks with the mouse (+put some down I want)
        - different biomes

TODOS:
	- write stuff on screen
	- water if air && level < 64

IN PROGRES:
    - https://stackoverflow.com/questions/15821969/what-is-the-proper-way-to-modify-opengl-vertex-buffer
    - https://stackoverflow.com/questions/54583368/how-to-draw-multiple-objects-in-opengl-using-multiple-vao-and-vbo

DONE:
	- pthread chunk creation


Some info:
  - Sprinting allows the player to move at around 5.612 meters/second, which is 30 percent faster than the normal walking speed of around 4.317 m/s, jumping while sprinting allows the player to move with an average speed of 7.127 m/s. 
  - render dist 20, fsan, no move, seed 123456u, 2fps, 1fps, 31fps, 17fps, 34fps, 33fps..
  - all I need is here https://mcasset.cloud
  - ray casting in voxel grid: http://www.cse.yorku.ca/~amana/research/grid.pdf